#!/usr/bin/env python
"""
This is a horrible, horrible way of generating a web gui for this.
It needs some love.
Would be really good to move this into a more MVC style with jinja2 templates.
"""

from flask import Flask, jsonify, render_template, request, redirect, Response
app = Flask(__name__)

import json
from recordkeeper.api import find_records, list_keys
import recordkeeper
from bson.objectid import ObjectId

recordkeeper.settings.DEBUG = True

import datetime


def encode_model(obj, recursive=False):
    """ Take a response from mongodb and turn it in to a json compilable object
    """

    if obj is None:
        #return obj
        return
    if isinstance(obj, int):
        out = obj
    elif isinstance(obj, (list)):
        out = [encode_model(item) for item in obj]
    elif isinstance(obj, (dict)):
        out = dict([(k, encode_model(v)) for (k, v) in obj.items()])
    elif isinstance(obj, datetime.datetime):
        out = str(obj)
    elif isinstance(obj, ObjectId):
        #out = {'ObjectId':str(obj)}
        out = str(obj)
    elif isinstance(obj, (str, unicode)):
        out = obj
    elif isinstance(obj, float):
        out = str(obj)
    else:
        raise TypeError(
           "Could not JSON-encode type '%s': %s" % (type(obj), str(obj))
        )
    return out


@app.route("/json/listkeys")
def json_listkeys():
    return Response(json.dumps(list_keys()),  mimetype='application/json')


@app.route('/', methods=['POST', 'GET'])
def index():
    """ basic list of all the objects. """
    show = request.args.get('show')
    if not show:
        show = ""
        #return redirect('/?show=name _type')

    added_show = []
    if request.method == 'POST':
        added_show = request.form['show'].split()

    show = show.split(' ') + added_show
    records = find_records(['name','_type'] + show)

    return render_template("index.html", records=records, keys=show)


@app.route("/r/<name>")
def single_record(name, full_record=None):
    #if not full_record:
        #full_record = find_records('name=%s' % str(name))
    return render_template("full_record.html", full_record=sorted(full_record.items()))


@app.route("/s/<query>")
def search(query):
    "Basic search"
    records = find_records(query)
    if len(records) == 1:
        record = records[0]
        record_name = record['name']
        return single_record(name=record_name,
                             full_record=record)
    return render_template("index.html", records=records, query=query)


if __name__ == "__main__":
    app.debug = True
    app.run()
